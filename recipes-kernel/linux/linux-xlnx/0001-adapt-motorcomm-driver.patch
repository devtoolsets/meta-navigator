From dca9f9e0b11f8a31d36b8795b048f09092916b81 Mon Sep 17 00:00:00 2001
From: devtoosets <devtoolset@email.cn>
Date: Sat, 9 Sep 2023 08:08:27 +0800
Subject: [PATCH] adapt motorcomm driver

---
 drivers/net/phy/motorcomm.c | 303 ++++++++++++++++++++++++++++++++++++
 1 file changed, 303 insertions(+)

diff --git a/drivers/net/phy/motorcomm.c b/drivers/net/phy/motorcomm.c
index 7e6ac2c5e27e..3716b6674cc5 100644
--- a/drivers/net/phy/motorcomm.c
+++ b/drivers/net/phy/motorcomm.c
@@ -10,6 +10,7 @@
 #include <linux/phy.h>
 
 #define PHY_ID_YT8511		0x0000010a
+#define PHY_ID_YT8521		0x0000011a
 
 #define YT8511_PAGE_SELECT	0x1e
 #define YT8511_PAGE		0x1f
@@ -48,10 +49,69 @@ static int yt8511_write_page(struct phy_device *phydev, int page)
 	return __phy_write(phydev, YT8511_PAGE_SELECT, page);
 };
 
+static int ytphy_read_ext(struct phy_device *phydev, u32 regnum)
+{
+    int ret;
+
+    ret = phy_write(phydev, YT8511_PAGE_SELECT, regnum);
+    if (ret < 0)
+        return ret;
+
+    return phy_read(phydev, YT8511_PAGE);
+}
+
+static int ytphy_write_ext(struct phy_device *phydev, u32 regnum, u16 val)
+{
+    int ret;
+
+    ret = phy_write(phydev, YT8511_PAGE_SELECT, regnum);
+    if (ret < 0)
+        return ret;
+
+    return phy_write(phydev, YT8511_PAGE, val);
+}
+
+static int yt8511_gmii_config_init(struct phy_device *phydev)
+{
+    /* disable auto sleep */
+    int val = ytphy_read_ext(phydev, 0x27);
+    if (val < 0) return val;
+
+    val &= (~BIT(15));
+
+    val = ytphy_write_ext(phydev, 0x27, val);
+    if (val < 0) return val;
+
+    /* ext reg 0xc.b[2:1]
+        00-----25M from pll;
+        01---- 25M from xtl;(default)
+        10-----62.5M from pll;
+        11----125M from pll(here set to this value) */
+    val = ytphy_read_ext(phydev, 0xc);
+    if (val < 0) return val;
+
+    val |= (3 << 1);
+
+    val = ytphy_write_ext(phydev, 0xc, val);
+    if (val < 0) return val;
+
+    /* ext reg 0xc b[7:4]
+       Tx Delay time = 150ps * N â€“ 250ps */
+    val = ytphy_read_ext(phydev, 0xc);
+    if (val < 0) return val;
+
+    val &= ~(0xf << 4);
+    val |= YT8511_EXT_DELAY_DRIVE << 4;
+
+    return ytphy_write_ext(phydev, 0xc, val);
+}
+
 static int yt8511_config_init(struct phy_device *phydev)
 {
 	int oldpage, ret = 0;
 	unsigned int ge, fe;
+	if (phydev->interface == PHY_INTERFACE_MODE_GMII)
+        return yt8511_gmii_config_init(phydev);
 
 	oldpage = phy_select_page(phydev, YT8511_EXT_CLK_GATE);
 	if (oldpage < 0)
@@ -111,6 +171,235 @@ static int yt8511_config_init(struct phy_device *phydev)
 	return phy_restore_page(phydev, oldpage, ret);
 }
 
+#define REG_PHY_SPEC_STATUS     0x11
+#define YT8521_EN_SLEEP_SW_BIT  15
+#define YT8521_DUPLEX           0x2000
+#define YT8521_DUPLEX_BIT       13
+#define YT8521_SPEED_MODE       0xc000
+#define YT8521_SPEED_MODE_BIT   14
+#define YT8521_LINK_STATUS_BIT  10
+
+#define YT8521_PHY_MODE_FIBER   1 //fiber mode only
+#define YT8521_PHY_MODE_UTP     2 //utp mode only
+#define YT8521_PHY_MODE_POLL    3 //fiber and utp, poll mode
+#define YT8521_PHY_MODE_CURR    3
+
+#define YT8521_NUM_OF_FIBER_PHY 3
+static unsigned long autoneg_phydev[YT8521_NUM_OF_FIBER_PHY];
+static int           autoneg_changed[YT8521_NUM_OF_FIBER_PHY];
+static int           autoneg_actual_num_phy = 0;
+
+static int link_mode_8521 = 0; //0: no link; 1: utp; 32: fiber. traced that 1000m fiber uses 32.
+
+static int yt8521_config_init(struct phy_device *phydev)
+{
+    int ret, val, i;
+
+    for(i = 0; i < YT8521_NUM_OF_FIBER_PHY; i++) {
+        if (autoneg_phydev[i] && (autoneg_phydev[i] == (unsigned long)phydev->attached_dev)) {
+            autoneg_changed[i] = 0;
+            break;
+        } else if(0 == autoneg_phydev[i]) {
+            autoneg_phydev[i] = (unsigned long)phydev->attached_dev;
+            autoneg_changed[i] = 0;
+            autoneg_actual_num_phy++;
+            break;
+        }
+    }
+
+    phydev->irq = PHY_POLL;
+    ytphy_write_ext(phydev, 0xa000, 0);
+
+    /* disable auto sleep */
+    val = ytphy_read_ext(phydev, YT8511_EXT_SLEEP_CTRL);
+    if (val < 0)
+        return val;
+
+    val &= (~BIT(YT8521_EN_SLEEP_SW_BIT));
+
+    ret = ytphy_write_ext(phydev, YT8511_EXT_SLEEP_CTRL, val);
+    if (ret < 0)
+        return ret;
+
+    /* enable RXC clock when no wire plug */
+    ret = ytphy_write_ext(phydev, 0xa000, 0);
+    if (ret < 0)
+        return ret;
+
+    val = ytphy_read_ext(phydev, 0xc);
+    if (val < 0)
+        return val;
+    val &= ~(1 << 12);
+    ret = ytphy_write_ext(phydev, 0xc, val);
+    if (ret < 0)
+        return ret;
+    return ret;
+}
+
+int yt8521_suspend(struct phy_device *phydev)
+{
+    int value;
+
+    /* mutex_lock(&phydev->lock); */
+    ytphy_write_ext(phydev, 0xa000, 0);
+    value = phy_read(phydev, MII_BMCR);
+    phy_write(phydev, MII_BMCR, value | BMCR_PDOWN);
+
+    ytphy_write_ext(phydev, 0xa000, 2);
+    value = phy_read(phydev, MII_BMCR);
+    phy_write(phydev, MII_BMCR, value | BMCR_PDOWN);
+
+    ytphy_write_ext(phydev, 0xa000, 0);
+    /* mutex_unlock(&phydev->lock); */
+
+    return 0;
+}
+
+int yt8521_resume(struct phy_device *phydev)
+{
+    int value;
+
+    /* mutex_lock(&phydev->lock); */
+    ytphy_write_ext(phydev, 0xa000, 0);
+    value = phy_read(phydev, MII_BMCR);
+    phy_write(phydev, MII_BMCR, value & ~BMCR_PDOWN);
+
+    ytphy_write_ext(phydev, 0xa000, 2);
+    value = phy_read(phydev, MII_BMCR);
+    phy_write(phydev, MII_BMCR, value & ~BMCR_PDOWN);
+
+    ytphy_write_ext(phydev, 0xa000, 0);
+    /* mutex_unlock(&phydev->lock); */
+
+    return 0;
+}
+
+int yt8521_soft_reset(struct phy_device *phydev)
+{
+    int ret;
+
+    ytphy_write_ext(phydev, 0xa000, 0);
+    ret = genphy_soft_reset(phydev);
+    if (ret < 0)
+        return ret;
+
+    ytphy_write_ext(phydev, 0xa000, 2);
+    ret = genphy_soft_reset(phydev);
+    if (ret < 0) {
+        ytphy_write_ext(phydev, 0xa000, 0);
+        return ret;
+    }
+
+    return 0;
+}
+
+int yt8521_aneg_done(struct phy_device *phydev)
+{
+    if ((32 == link_mode_8521) && (SPEED_100 == phydev->speed)) {
+        return 1;
+    }
+
+    return genphy_aneg_done(phydev);
+}
+
+static int yt8521_adjust_status(struct phy_device *phydev, int val, int utp)
+{
+    int speed = SPEED_UNKNOWN, duplex, speed_mode;
+
+    duplex = (val & YT8521_DUPLEX) >> YT8521_DUPLEX_BIT;
+    speed_mode = (val & YT8521_SPEED_MODE) >> YT8521_SPEED_MODE_BIT;
+    switch (speed_mode) {
+    case 0:
+        if (utp)
+            speed = SPEED_10;
+        break;
+    case 1:
+        speed = SPEED_100;
+        break;
+    case 2:
+        speed = SPEED_1000;
+        break;
+    case 3:
+        break;
+    default:
+        speed = SPEED_UNKNOWN;
+        break;
+    }
+
+    phydev->speed = speed;
+    phydev->duplex = duplex;
+
+    return 0;
+}
+
+static int yt8521_read_status(struct phy_device *phydev)
+{
+    //int i;
+    int ret;
+    volatile int val, yt8521_fiber_latch_val, yt8521_fiber_curr_val;
+    volatile int link;
+    int link_utp = 0, link_fiber = 0;
+#if (YT8521_PHY_MODE_CURR != YT8521_PHY_MODE_FIBER)
+    /* reading UTP */
+    ret = ytphy_write_ext(phydev, 0xa000, 0);
+    if (ret < 0)
+        return ret;
+
+    val = phy_read(phydev, REG_PHY_SPEC_STATUS);
+    if (val < 0)
+        return val;
+
+    link = val & (BIT(YT8521_LINK_STATUS_BIT));
+    if (link) {
+        link_utp = 1;
+        link_mode_8521 = 1;
+        yt8521_adjust_status(phydev, val, 1);
+    } else {
+        link_utp = 0;
+    }
+#endif
+
+#if (YT8521_PHY_MODE_CURR != YT8521_PHY_MODE_UTP)
+    /* reading Fiber */
+    ret = ytphy_write_ext(phydev, 0xa000, 2);
+    if (ret < 0)
+        return ret;
+
+    val = phy_read(phydev, REG_PHY_SPEC_STATUS);
+    if (val < 0)
+        return val;
+
+    /* for fiber, from 1000m to 100m, there is not link down from 0x11, and check reg 1 to identify such case */
+    yt8521_fiber_latch_val = phy_read(phydev, MII_BMSR);
+    yt8521_fiber_curr_val = phy_read(phydev, MII_BMSR);
+    link = val & (BIT(YT8521_LINK_STATUS_BIT));
+    if (link && (yt8521_fiber_latch_val != yt8521_fiber_curr_val)) {
+        link = 0;
+    }
+
+    if (link) {
+        link_fiber = 1;
+        yt8521_adjust_status(phydev, val, 0);
+        link_mode_8521 = 32; //fiber mode
+    } else {
+        link_fiber = 0;
+    }
+#endif
+
+    if (link_utp || link_fiber) {
+        phydev->link = 1;
+    } else {
+        phydev->link = 0;
+        link_mode_8521 = 0;
+    }
+
+    if (link_utp) {
+        ytphy_write_ext(phydev, 0xa000, 0);
+    }
+
+    return 0;
+}
+
 static struct phy_driver motorcomm_phy_drvs[] = {
 	{
 		PHY_ID_MATCH_EXACT(PHY_ID_YT8511),
@@ -120,6 +409,19 @@ static struct phy_driver motorcomm_phy_drvs[] = {
 		.resume		= genphy_resume,
 		.read_page	= yt8511_read_page,
 		.write_page	= yt8511_write_page,
+    }, {
+		PHY_ID_MATCH_EXACT(PHY_ID_YT8521),
+        .name           = "YT8521-Ethernet",
+        .config_init    = yt8521_config_init,
+        .suspend        = yt8521_suspend,
+        .resume         = yt8521_resume,
+
+        .features       = PHY_GBIT_FEATURES,
+        .flags          = PHY_POLL,
+        .soft_reset     = yt8521_soft_reset,
+        .config_aneg    = genphy_config_aneg,
+        .aneg_done      = yt8521_aneg_done,
+        .read_status    = yt8521_read_status,
 	},
 };
 
@@ -131,6 +433,7 @@ MODULE_LICENSE("GPL");
 
 static const struct mdio_device_id __maybe_unused motorcomm_tbl[] = {
 	{ PHY_ID_MATCH_EXACT(PHY_ID_YT8511) },
+	{ PHY_ID_MATCH_EXACT(PHY_ID_YT8521) },
 	{ /* sentinal */ }
 };
 
-- 
2.41.0

